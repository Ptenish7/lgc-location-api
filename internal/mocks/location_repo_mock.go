// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/lgc-location-api/internal/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ozonmp/lgc-location-api/internal/model"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateLocation mocks base method.
func (m *MockRepo) CreateLocation(arg0 context.Context, arg1, arg2 float64, arg3 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockRepoMockRecorder) CreateLocation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockRepo)(nil).CreateLocation), arg0, arg1, arg2, arg3)
}

// DescribeLocation mocks base method.
func (m *MockRepo) DescribeLocation(arg0 context.Context, arg1 uint64) (*model.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLocation", arg0, arg1)
	ret0, _ := ret[0].(*model.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLocation indicates an expected call of DescribeLocation.
func (mr *MockRepoMockRecorder) DescribeLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLocation", reflect.TypeOf((*MockRepo)(nil).DescribeLocation), arg0, arg1)
}

// ListLocations mocks base method.
func (m *MockRepo) ListLocations(arg0 context.Context, arg1, arg2 uint64) ([]*model.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockRepoMockRecorder) ListLocations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockRepo)(nil).ListLocations), arg0, arg1, arg2)
}

// RemoveLocation mocks base method.
func (m *MockRepo) RemoveLocation(arg0 context.Context, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLocation", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLocation indicates an expected call of RemoveLocation.
func (mr *MockRepoMockRecorder) RemoveLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLocation", reflect.TypeOf((*MockRepo)(nil).RemoveLocation), arg0, arg1)
}
