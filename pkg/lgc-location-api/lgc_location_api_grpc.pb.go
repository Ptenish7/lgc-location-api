// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lgc_location_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LgcLocationApiServiceClient is the client API for LgcLocationApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LgcLocationApiServiceClient interface {
	// CreateLocationV1 - Create a location
	CreateLocationV1(ctx context.Context, in *CreateLocationV1Request, opts ...grpc.CallOption) (*CreateLocationV1Response, error)
	// DescribeLocationV1 - Describe a location
	DescribeLocationV1(ctx context.Context, in *DescribeLocationV1Request, opts ...grpc.CallOption) (*DescribeLocationV1Response, error)
	// ListLocationsV1 - List locations
	ListLocationsV1(ctx context.Context, in *ListLocationsV1Request, opts ...grpc.CallOption) (*ListLocationsV1Response, error)
	// UpdateLocationV1 - Update a location
	UpdateLocationV1(ctx context.Context, in *UpdateLocationV1Request, opts ...grpc.CallOption) (*UpdateLocationV1Response, error)
	// RemoveLocationV1 - Remove a location
	RemoveLocationV1(ctx context.Context, in *RemoveLocationV1Request, opts ...grpc.CallOption) (*RemoveLocationV1Response, error)
}

type lgcLocationApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLgcLocationApiServiceClient(cc grpc.ClientConnInterface) LgcLocationApiServiceClient {
	return &lgcLocationApiServiceClient{cc}
}

func (c *lgcLocationApiServiceClient) CreateLocationV1(ctx context.Context, in *CreateLocationV1Request, opts ...grpc.CallOption) (*CreateLocationV1Response, error) {
	out := new(CreateLocationV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.lgc_location_api.v1.LgcLocationApiService/CreateLocationV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lgcLocationApiServiceClient) DescribeLocationV1(ctx context.Context, in *DescribeLocationV1Request, opts ...grpc.CallOption) (*DescribeLocationV1Response, error) {
	out := new(DescribeLocationV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.lgc_location_api.v1.LgcLocationApiService/DescribeLocationV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lgcLocationApiServiceClient) ListLocationsV1(ctx context.Context, in *ListLocationsV1Request, opts ...grpc.CallOption) (*ListLocationsV1Response, error) {
	out := new(ListLocationsV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.lgc_location_api.v1.LgcLocationApiService/ListLocationsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lgcLocationApiServiceClient) UpdateLocationV1(ctx context.Context, in *UpdateLocationV1Request, opts ...grpc.CallOption) (*UpdateLocationV1Response, error) {
	out := new(UpdateLocationV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.lgc_location_api.v1.LgcLocationApiService/UpdateLocationV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lgcLocationApiServiceClient) RemoveLocationV1(ctx context.Context, in *RemoveLocationV1Request, opts ...grpc.CallOption) (*RemoveLocationV1Response, error) {
	out := new(RemoveLocationV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.lgc_location_api.v1.LgcLocationApiService/RemoveLocationV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LgcLocationApiServiceServer is the server API for LgcLocationApiService service.
// All implementations must embed UnimplementedLgcLocationApiServiceServer
// for forward compatibility
type LgcLocationApiServiceServer interface {
	// CreateLocationV1 - Create a location
	CreateLocationV1(context.Context, *CreateLocationV1Request) (*CreateLocationV1Response, error)
	// DescribeLocationV1 - Describe a location
	DescribeLocationV1(context.Context, *DescribeLocationV1Request) (*DescribeLocationV1Response, error)
	// ListLocationsV1 - List locations
	ListLocationsV1(context.Context, *ListLocationsV1Request) (*ListLocationsV1Response, error)
	// UpdateLocationV1 - Update a location
	UpdateLocationV1(context.Context, *UpdateLocationV1Request) (*UpdateLocationV1Response, error)
	// RemoveLocationV1 - Remove a location
	RemoveLocationV1(context.Context, *RemoveLocationV1Request) (*RemoveLocationV1Response, error)
	mustEmbedUnimplementedLgcLocationApiServiceServer()
}

// UnimplementedLgcLocationApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLgcLocationApiServiceServer struct {
}

func (UnimplementedLgcLocationApiServiceServer) CreateLocationV1(context.Context, *CreateLocationV1Request) (*CreateLocationV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocationV1 not implemented")
}
func (UnimplementedLgcLocationApiServiceServer) DescribeLocationV1(context.Context, *DescribeLocationV1Request) (*DescribeLocationV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeLocationV1 not implemented")
}
func (UnimplementedLgcLocationApiServiceServer) ListLocationsV1(context.Context, *ListLocationsV1Request) (*ListLocationsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocationsV1 not implemented")
}
func (UnimplementedLgcLocationApiServiceServer) UpdateLocationV1(context.Context, *UpdateLocationV1Request) (*UpdateLocationV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocationV1 not implemented")
}
func (UnimplementedLgcLocationApiServiceServer) RemoveLocationV1(context.Context, *RemoveLocationV1Request) (*RemoveLocationV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLocationV1 not implemented")
}
func (UnimplementedLgcLocationApiServiceServer) mustEmbedUnimplementedLgcLocationApiServiceServer() {}

// UnsafeLgcLocationApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LgcLocationApiServiceServer will
// result in compilation errors.
type UnsafeLgcLocationApiServiceServer interface {
	mustEmbedUnimplementedLgcLocationApiServiceServer()
}

func RegisterLgcLocationApiServiceServer(s grpc.ServiceRegistrar, srv LgcLocationApiServiceServer) {
	s.RegisterService(&LgcLocationApiService_ServiceDesc, srv)
}

func _LgcLocationApiService_CreateLocationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LgcLocationApiServiceServer).CreateLocationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.lgc_location_api.v1.LgcLocationApiService/CreateLocationV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LgcLocationApiServiceServer).CreateLocationV1(ctx, req.(*CreateLocationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LgcLocationApiService_DescribeLocationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeLocationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LgcLocationApiServiceServer).DescribeLocationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.lgc_location_api.v1.LgcLocationApiService/DescribeLocationV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LgcLocationApiServiceServer).DescribeLocationV1(ctx, req.(*DescribeLocationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LgcLocationApiService_ListLocationsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LgcLocationApiServiceServer).ListLocationsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.lgc_location_api.v1.LgcLocationApiService/ListLocationsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LgcLocationApiServiceServer).ListLocationsV1(ctx, req.(*ListLocationsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LgcLocationApiService_UpdateLocationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LgcLocationApiServiceServer).UpdateLocationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.lgc_location_api.v1.LgcLocationApiService/UpdateLocationV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LgcLocationApiServiceServer).UpdateLocationV1(ctx, req.(*UpdateLocationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LgcLocationApiService_RemoveLocationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLocationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LgcLocationApiServiceServer).RemoveLocationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.lgc_location_api.v1.LgcLocationApiService/RemoveLocationV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LgcLocationApiServiceServer).RemoveLocationV1(ctx, req.(*RemoveLocationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// LgcLocationApiService_ServiceDesc is the grpc.ServiceDesc for LgcLocationApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LgcLocationApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozonmp.lgc_location_api.v1.LgcLocationApiService",
	HandlerType: (*LgcLocationApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLocationV1",
			Handler:    _LgcLocationApiService_CreateLocationV1_Handler,
		},
		{
			MethodName: "DescribeLocationV1",
			Handler:    _LgcLocationApiService_DescribeLocationV1_Handler,
		},
		{
			MethodName: "ListLocationsV1",
			Handler:    _LgcLocationApiService_ListLocationsV1_Handler,
		},
		{
			MethodName: "UpdateLocationV1",
			Handler:    _LgcLocationApiService_UpdateLocationV1_Handler,
		},
		{
			MethodName: "RemoveLocationV1",
			Handler:    _LgcLocationApiService_RemoveLocationV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ozonmp/lgc_location_api/v1/lgc_location_api.proto",
}
